package id.chalathadoa.chapter3

import android.annotation.SuppressLint
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import id.chalathadoa.chapter3.databinding.ActivityMainBinding
import kotlinx.android.synthetic.main.activity_main.*

class Screen1 : AppCompatActivity() {
    private lateinit var binding: ActivityMainBinding
    val CAMERA_RC = 27
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        setContentView(R.layout.activity_screen1)
        Log.e("activity lifecycle", "onCreate")
        buttonTaps()
    }
    private fun buttonTaps(){
        btnCamera.setOnClickListener{
            checkForPermission(android.Manifest.permission.CAMERA, "camera", CAMERA_RC)
        }
    }
    private fun checkForPermission(permission: String, name: String, requestCode: Int){
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){
            when {
                ContextCompat.checkSelfPermission(applicationContext, permission) == PackageManager.PERMISSION_GRANTED -> {
                    Toast.makeText(applicationContext, "permission GRANTED", Toast.LENGTH_SHORT).show()
                }
                shouldShowRequestPermissionRationale(permission) -> showDialog(permission, name, requestCode)

                else -> ActivityCompat.requestPermissions(this, arrayOf(permission), requestCode)
            }
        }
    }

    @SuppressLint("MissingSuperCall")
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        fun innerCheck(name: String){
            if (grantResults.isEmpty() || grantResults[0] != PackageManager.PERMISSION_GRANTED){
                Toast.makeText(applicationContext, "$name permission refused", Toast.LENGTH_SHORT).show()
            } else {
                Toast.makeText(applicationContext, "$name permission granted", Toast.LENGTH_SHORT).show()
            }
        }
        when (requestCode){
            CAMERA_RC -> innerCheck("Camera")
        }
    }
    private fun showDialog(permission: String, name: String, requestCode: Int){
        val builder = AlertDialog.Builder(this)

        builder.apply {
            setMessage("Permission to access your $name is required to use this app")
            setTitle("Permission required")
            setPositiveButton("OK") { dialog, which ->
                ActivityCompat.requestPermissions(this@Screen1, arrayOf(permission), requestCode)
            }
        }
        val dialog = builder.create()
        dialog.show()
    }
    private fun moveToMainActivity(){
        binding.btnMove.setOnClickListener{
            val intent = Intent(this, Screen1::class.java)
            startActivity(intent)
        }
    }

    override fun onStart() {
        super.onStart()
        Log.e("activity lifecycle", "onStart")
    }

    override fun onResume() {
        super.onResume()
        Log.e("activity lifecycle", "onResume")
    }

    override fun onRestart() {
        super.onRestart()
        Log.e("activity lifecycle", "onRestart")
    }

    override fun onPause() {
        super.onPause()
        Log.e("activity lifecycle", "onPause")
    }

    override fun onStop() {
        super.onStop()
        Log.e("activity lifecycle", "onStop")
    }

    override fun onDestroy() {
        super.onDestroy()
        Log.e("activity lifecycle", "onDestroy")
    }
}

/**
 * Hasil Pengamatan LIFECYCLE:
 * --Saat menjalankan apk pertama kali = onCreate, onStart, onResume
 * --Saat hp sleep = onPause, onStop
 * --Saat membuka setelah sleep = onRestart, onStart, onResume
 * --Saat mengubah rotasi = onPause, onStop, onDestroy, onCreate, onStart, onResume
 */
